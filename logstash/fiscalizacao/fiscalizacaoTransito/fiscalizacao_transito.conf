input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://bdprod.agrodefesa.go.gov.br:5432/sistemas"
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.2.jar"
        jdbc_user => "postgres"
        jdbc_password => "postgres"
        jdbc_driver_class => "org.postgresql.Driver"
        statement_filepath => "/etc/logstash/conf.d/fiscalizacao/transito/fiscalizacao_transito.sql"
        jdbc_paging_enabled => "true"
        jdbc_page_size => "100000"
        schedule => "00 00 * * * America/Sao_Paulo"
    }
}

filter {
    ruby {
        code => "
                    event.set('fiscalizacao_localizacao_gps', nil)

                    deg, min, sec = event.get('fiscalizacao_localizacao_gps_latitude').split(' ').map(&:to_f)
                    deg = deg ? deg : 0
                    min = min ? min : 0
                    sec = sec ? sec : 0
                    lat_output = deg+min+sec

                    if lat_output > 0
                      lat_output = (deg + (min / 60.0) + (sec / 3600.0))*-1
                      lat_output = lat_output.abs > 90 ? 0 : lat_output
                    end

                    deg, min, sec = event.get('fiscalizacao_localizacao_gps_longitude').split(' ').map(&:to_f)
                    deg = deg ? deg : 0
                    min = min ? min : 0
                    sec = sec ? sec : 0
                    lon_output = deg+min+sec

                    if lon_output > 0
                      lon_output = (deg + (min / 60.0) + (sec / 3600.0))*-1
                      lon_output = lon_output.abs > 180 ? 0 : lon_output
                    end

                    if (lat_output < 0 && lon_output < 0)
                      output = lat_output.to_s + ',' + lon_output.to_s
                      event.set('fiscalizacao_localizacao_gps', output)
                    end

                    event.set('unidade_gps', nil)

                    lat = event.get('unidade_gps_latitude').to_s
                    deg = lat[0,2].to_f
                    min = lat[2,2].to_f
                    sec = lat[4,2].to_f + (lat[6,1].to_f / 10)
                    lat_output = deg+min+sec

                    if lat_output > 0
                      lat_output = (deg + (min / 60.0) + (sec / 3600.0))*-1
                      lat_output = lat_output.abs > 90 ? 0 : lat_output
                    end

                    lon = event.get('unidade_gps_longitude').to_s
                    deg = lon[0,2].to_f
                    min = lon[2,2].to_f
                    sec = lon[4,2].to_f + (lon[6,1].to_f / 10)
                    lon_output = deg+min+sec

                    if lon_output > 0
                      lon_output = (deg + (min / 60.0) + (sec / 3600.0))*-1
                      lon_output = lon_output.abs > 180 ? 0 : lon_output
                    end

                    if (lat_output < 0 && lon_output < 0)
                      output = lat_output.to_s + ',' + lon_output.to_s
                      event.set('unidade_gps', output)
                    end

                "
    }

    mutate {
   	    remove_field => ["fiscalizacao_localizacao_gps_latitude", "fiscalizacao_localizacao_gps_longitude" ,"unidade_gps_latitude", "unidade_gps_longitude"]
        rename =>{
         	"termo_fiscalizacao_quantidade" => "[termo_fiscalizacao][quantidade]"

         	"transito_id" => "[transito][id]"

   		    "produto_tipo" => "[produto][tipo]"
   		    "produto_classificacao" => "[produto][classificacao]"
		    "produto_medida" => "[produto][medida]"
		    "produto_quantidade" => "[produto][quantidade]"

   		    "fiscalizacao_localizacao_nome" => "[fiscalizacao][localizacao][nome]"
		    "fiscalizacao_localizacao_gps" => "[fiscalizacao][localizacao][gps]"

   		    "fiscalizacao_municipio_nome" => "[fiscalizacao][municipio][nome]"
		    "fiscalizacao_municipio_gps_latitude" => "[fiscalizacao][municipio][gps][lat]"
		    "fiscalizacao_municipio_gps_longitude" => "[fiscalizacao][municipio][gps][lon]"

   		    "origem_nome" => "[origem][nome]"
   		    "origem_documento" => "[origem][documento]"
		    "origem_municipio_nome" => "[origem][municipio][nome]"
		    "origem_municipio_uf" => "[origem][municipio][uf]"
		    "origem_municipio_gps_latitude" => "[origem][municipio][gps][lat]"
		    "origem_municipio_gps_longitude" => "[origem][municipio][gps][lon]"

   		    "destino_nome" => "[destino][nome]"
   		    "destino_documento" => "[destino][documento]"
		    "destino_municipio_nome" => "[destino][municipio][nome]"
		    "destino_municipio_uf" => "[destino][municipio][uf]"
		    "destino_municipio_gps_latitude" => "[destino][municipio][gps][lat]"
		    "destino_municipio_gps_longitude" => "[destino][municipio][gps][lon]"

 		    "unidade_tipo" => "[unidade][tipo]"
   		    "unidade_id" => "[unidade][id]"
   		    "unidade_nome" => "[unidade][nome]"
   		    "unidade_gps" => "[unidade][gps]"

   		    "documento_numero" => "[documento][numero]"
   		    "documento_sigla" => "[documento][sigla]"
		    "documento_nome" => "[documento][nome]"
	    }
    }
}

output {
    stdout {
        codec =>  rubydebug {
          metadata => true
        }
    }
    elasticsearch {
        index => "fiscalizacao_transito"
        document_id => "%{id}"
        hosts => ["http://elastic2.agrodefesa.go.gov.br:9200"]
        user => "elastic"
        password => "mito2019"
    }
}
